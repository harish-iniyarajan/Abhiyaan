#include<iostream>
#include<string.h>

using namespace std;

struct tree{
	string data;
	tree *left, *right;
};

int findex(string s, int n)
{
	while(47<s[n]&&s[n]<58)
	 n++;
    return (n-1);
}

tree *newtree(string str)
{
	tree *ptr=new tree;
	ptr->data=str;
	ptr->left=ptr->right=NULL;
	return ptr;
}

tree *createtree(string str, int &p)
{
	tree *root= new tree;
	root=newtree(str.substr(p, (findex(str,p)-p+1)));      //Passes a substring containing the number.
	if(str[(findex(str,p)+1)]=='[')
	{
		p=(findex(str,p)+2);
		root->left=createtree(str, p);
	}
	else if(str[(findex(str,p)+1)]==',')
	{
		p=findex(str,p)+2;
		return root;
	}
	else
	{
	 for(int i=p+1;i<str.length();i++)
	 {
	 	if(47<str[i]&&str[i]<58)
	 	{
	 		p=i;
	 		break;
		}
	 }
	 return root;
    }
	root->right=createtree(str, p);
	return root;
}

void printtree(tree *root, int s)
{
	s++;
	if(root==NULL)
	 return;
	printtree(root->right,s);
	for(int i=0;i<s;i++)
	 cout<<"  ";
	cout<<root->data<<endl;
	printtree(root->left,s);
}

void printrw(tree *root)
{
	if(root==NULL)
	 return;
	cout<<root->data<<"  ";
	printrw(root->right);
	return;
}

tree *findmn(tree *root)
{
	tree *max=root;
	while(root!=NULL)
	{
		if(max->data.length()==root->data.length())
		{
			if((root->data)>(max->data))
			 max=root;
		}
		else if((root->data.length())>(max->data.length()))
		 max=root;
     root=root->right;
	}
	return max;
}

void printrmax(tree *root)
{
	tree *maxnode=new tree;
	maxnode=findmn(root);
	printtree(maxnode,0);
}

int main()
{
	string btree;
	cin>>btree;
	int k=0;
	tree *start=createtree(btree,k);
	printtree(start,0);
	cout<<endl<<"The right view of the tree is:";
	printrw(start);
	cout<<endl<<"Tree with maximum right node:"<<endl;
	printrmax(start);
	return 0;
}
